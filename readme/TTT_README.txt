The following shows simple examples of Total Test CLI commands.  For
complete command arguments type the following at a command prompt.

TotalTestCLI -cmd=<command> -help

where <command> is:
    runtest - Runs a test suite or test scenario. Performs all the commands in a single request.
    build - Builds the binary and archive file from the test suite or test scenario.
    upload - Uploads the required binary files to the mainframe.
    submit - Submits the JCL to execute the Total Test test
    download - Downloads the required binary files from the mainframe
    parse - Parses the binary files to get test results.
    resultscheck - Creates the various result files.

---------------------------------------------------------------
Running a test suite for test scenario
---------------------------------------------------------------

TotalTestCLI.bat ^
-cmd=runtest ^
-host=HOST01
-port=116196 ^ 
-user=TTTUser ^
-pw=TTRUserPw ^
-project=c:/TotalTest/MyProject
-ts=BigTestSuite.testsuite
-jclRunner.jcl

Runs a test for BigTestSuite contained MyProject using JCL Runner.  All
output is placed into the OUTPUT directories in the project.

================
Arguments
================

-h=<host name> | -host=<host name>
    The host name or IP address of the host to connect to.
-pt=<host port> | -port=<host port>
    The port the host is listening on.
-u=<user name> | -user=<user name>
    The name of the user to connect as.
-pw=<user password> | -password=<user password>
   The password associated with the user.
-p=<Total Test project directory> | -project=<Total Test project directory>
   Specifies the name of the Total Test project folder.
-ts=<Test suite or Test scenario name with the project>
   The name of the test suite or test scenario
-j=<JCL file name with the project> | -jclRunner.jcl
   The name of the file containing the JCL
   
---------------------------------------------------------------
Building binary files for upload
---------------------------------------------------------------

TotalTestCLI.bat ^
-cmd=build ^
-a=c:/TotalTest/totaltest.archive ^
-bin=c:/TotalTest/totaltest.bininp ^
-brf=c:/TotalTest/totaltest.binref ^
-ts=c:/workspaces/TotalTest/CLI_Project/suites/SampleTest.testsuite ^
-te=IBM1047

Creates the archive, binary input and binary reference files using the 
SampleTest test suite in project c:/workspaces/TotalTest/CLI_Project.

The binary input and binary reference file must be uploaded to the mainframe
for execution.

================
Arguments
================

-a=<archivefile> | -archive=<archivefile>
	The archive file to load the structure from and write the output into. 
	If omitted, it is inferred from the test suite file with the ending 
	replaced with '.archive' and stored in the same directory.
	
-bin=<inputfile> | -bininput=<inputfile>
	The binary input file to write to.
	
-brf=<referencefile> | -binref=<referncefile>
	The binary reference file to write to.
	
-ts=<testsuitefile> | -testsuite=<testsuitefile>
	The test suite file from which create the binary input for.
	
-te=<encoding> | -targetencoding=<encoding>
	The encoding used on the target system.

---------------------------------------------------------------
Uploading binaries files
---------------------------------------------------------------

TotalTestCLI ^
-cmd=upload ^
-host=HOST01
-port=116196 ^ 
-user=TTTUser ^
-pw=TTRUserPw ^
-bin=c:/TotalTest/totaltest.bininp ^
-brf=c:/TotalTest/totaltest.binref

Uploads the binary input file and binary reference file to the mainframe. The following
three datasets are created.

<UserID>.TOTALTST.IDxxxxxx.BININP
<UserID>.TOTALTST.IDxxxxxx.BINREF
<UserID>.TOTALTST.IDxxxxxx.BINRES

where 'xxxxxx' is a random number. This is to create unique dataset names from multiple runs.

The binary input file and binary reference files are the one created by the using the
-cmd=build

================
Arguments
================

-h=<host name> | -host=<host name>
    The host name or IP address of the host to connect to.
-pt=<host port> | -port=<host port>
    The port the host is listening on.
-u=<user name> | -user=<user name>
    The name of the user to connect as.
-pw=<user password> | -password=<user password>
    The password associated with the user.
-bin=<binary input file> | -bininput=<binary input file>
    The name of the local binary file to be uploaded.
    This file s is generated by running the -cmd=build.
-brf=<binary reference file> | -binref=<binary reference file>    
    The name of the local binary reference to be uploaded.
    This file s is generated by running the -cmd=build.
    
---------------------------------------------------------------
Submitting JCL to execute test
---------------------------------------------------------------

TotalTestCLI ^
-cmd=submit ^
-host=HOST01
-port=116196 ^ 
-user=TTTUser ^
-pw=TTRUserPw ^
-te=IBM1047
"-jcl=c:/workspaces/TotalTest/CLI_Project/Unit Test/JCL/Runner.jcl"
-bin=TTTUSER.TOTALTEST.ID123456.BININP
-bref=TTTUSER.TOTALTEST.ID123456.BINREF
-bres=TTTUSER.TOTALTEST.ID123456.BINRES

Submits the JCL to run Total Test. The JCL is updated to contain the specified dataset names.
These datasets are the ones created by using the -cmd=upload

================
Arguments
================

-h=<host name> | -host=<host name>
    The host name or IP address of the host to connect to.
-pt=<host port> | -port=<host port>
    The port the host is listening on.
-u=<user name> | -user=<user name>
    The name of the user to connect as.
-pw=<user password> | -password=<user password>
    The password associated with the user.
-j=<jcl file name> | -jcl=<jcl file name>
    The name of the file containing the JCL
-te=<encoding> | -targetencoding=<encoding>
	The encoding used on the target system.
-bindsn=<dataset name> | -bininpdsn=<dataset name>
    The name of dataset to replace '${TOTALTEST_BININP}', if present in the JCL.
-brfdsn=<dataset name> | -binrefdsn=<dataset name>
    The name of dataset to replace '${TOTALTEST_BINREF}', if present in the JCL.
-brsdsn=<dataset name> | -binresdsn=<dataset name>
    The name of dataset to replace '=${TOTALTEST_BINRES}', if present in the JCL

---------------------------------------------------------------
Downloading binary result file
---------------------------------------------------------------

TotalTestCLI ^
-cmd=download ^
-host=HOST01
-port=116196 ^ 
-user=TTTUser ^
-pw=TTRUserPw ^
-brdsn=TTTUSER.TOTALTEST.ID123456.BINRES ^
-brs=c:/TotalTest/totaltest.binres

================
Arguments
================

-h=<host name> | -host=<host name>
    The host name or IP address of the host to connect to.
-pt=<host port> | -port=<host port>
    The port the host is listening on.
-u=<user name> | -user=<user name>
    The name of the user to connect as.
-pw=<user password> | -password=<user password>
    The password associated with the user.
-brsdsn=<binary result dataset> | -binresdsn=<binary result dataset>
    The name of the z/OS binary result dataset to be downloaded.
	This dataset is one specified by the BINRES DD statement in the JCL.
-brs=<binary result file> | -binres=<binary result file>   
    The name of the local binary result file to which the z/OS binary result 
    dataset data will be downloaded into.
    
Downloads the binary result dataset create by running the test. The binary
dataset should be the dataset specified from the -cmd=submit
    
---------------------------------------------------------------
Parsing downloaded binaries
---------------------------------------------------------------

TotalTestCLI.bat ^
-cmd parse ^
-a=c:/TotalTest/totaltest.archive ^
-br=c:/TotalTest/totaltest.binres ^
-te=IBM1047

Parses the specified binary results file. The parsed results are placed in
the specified archive file.

================
Arguments
================

-a=<archivefile> | -archive=<archivefile>
	The archive file to write the parsed data. Important, a valid archive for the read 
	binary output must be present already, as this is needed to get structural information. 
	Usually this file is created by the Build CLI.
	
-br=<resultutputfile> | -binresult=<resultfile>
	The binary results input file to read from.
	
-te=<encoding> | -targetencoding=<encoding>
	The encoding used on the target system.

---------------------------------------------------------------
Parsing creating result files
---------------------------------------------------------------

TotalTestzCLI.bat ^
-cmd resultscheck ^
-a=c:/TotalTest/totaltest.archive ^
-te=IBM1047 ^
-o=c:/TotalTest/totaltest_out.archive ^
-rp=c:/TotalTest/totaltest.report ^
-rs=c:/TotalTest/totaltest.result

================
Arguments
================

-a=<archivefile> | -archive=<archivefile>
	The archive file to process. Usually this file is the one used for the Parse CLI.

-fe=<encoding> | -fileencoding=<encoding>
	The encoding used to store the output of this program. Default is UTF-8.

-te=<encoding> | -targetencoding=<encoding>
	The encoding used by the target. Usually not needed as this information is stored in the archive.

-o=<archivefile> | -output=<archivefile>
	An optional archive file for storing the results, instead writing to the input archive file.

-p=<projectfolder> | -project=<projectfolder>
	Specifies the location of the TotalTest project the archive resides in. Convenience option to 
	write the output, result and report in the corresponding folders of the TotalTest project. 
	Options -o/-rp/-rs, don't need to be supplied, as they will be inferred.
	
-rp=<file> | -report=<file>
	The file to write the report to. It is a HTML document describing the results.
	
-rs=<file> | -result=<file>
	The file to write the result to. It is a XML document describing the results, intended 
	to be used for further processing.
	
-s=(true|false) | -save=(true|false)
	Indicates whether to store the output files. If false, neither the output file will be written, 
	nor the archive file updated an option '-o' will be ignored. Default is true.

---------------------------------------------------------------
To DEBUG, add additional CLI arguments
---------------------------------------------------------------

-log=<value> | -loglevel=<value>
	Sets the log level. Must be INFO, WARN, DEBUG or ERROR.  Default is INFO.
-lp=<value> |  loglparms=<value>
    Logs the parameters for the request. Must be true or false. Default is true.